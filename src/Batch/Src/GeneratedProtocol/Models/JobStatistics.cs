// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Resource usage statistics for a job.
    /// </summary>
    public partial class JobStatistics
    {
        /// <summary>
        /// Initializes a new instance of the JobStatistics class.
        /// </summary>
        public JobStatistics() { }

        /// <summary>
        /// Initializes a new instance of the JobStatistics class.
        /// </summary>
        public JobStatistics(string url, DateTime startTime, DateTime lastUpdateTime, TimeSpan userCPUTime, TimeSpan kernelCPUTime, TimeSpan wallClockTime, long readIOps, long writeIOps, double readIOGiB, double writeIOGiB, long numSucceededTasks, long numFailedTasks, long numTaskRetries, TimeSpan waitTime)
        {
            Url = url;
            StartTime = startTime;
            LastUpdateTime = lastUpdateTime;
            UserCPUTime = userCPUTime;
            KernelCPUTime = kernelCPUTime;
            WallClockTime = wallClockTime;
            ReadIOps = readIOps;
            WriteIOps = writeIOps;
            ReadIOGiB = readIOGiB;
            WriteIOGiB = writeIOGiB;
            NumSucceededTasks = numSucceededTasks;
            NumFailedTasks = numFailedTasks;
            NumTaskRetries = numTaskRetries;
            WaitTime = waitTime;
        }

        /// <summary>
        /// Gets or sets the URL for the statistics.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the start time of the time range covered by the
        /// statistics.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or sets the time at which the statistics were last updated.
        /// All statistics are limited to the range between StartTime and
        /// LastUpdateTime.
        /// </summary>
        [JsonProperty(PropertyName = "lastUpdateTime")]
        public DateTime LastUpdateTime { get; set; }

        /// <summary>
        /// Gets or sets the total user mode CPU time (summed across all cores
        /// and all compute nodes) consumed by all the tasks in the job.
        /// </summary>
        [JsonProperty(PropertyName = "userCPUTime")]
        public TimeSpan UserCPUTime { get; set; }

        /// <summary>
        /// Gets or sets the total kernel mode CPU time (summed across all
        /// cores and all compute nodes) consumed by all the tasks in the job.
        /// </summary>
        [JsonProperty(PropertyName = "kernelCPUTime")]
        public TimeSpan KernelCPUTime { get; set; }

        /// <summary>
        /// Gets or sets the total wall clock time of all the tasks in the job.
        /// </summary>
        [JsonProperty(PropertyName = "wallClockTime")]
        public TimeSpan WallClockTime { get; set; }

        /// <summary>
        /// Gets or sets the total number of I/O read operations performed by
        /// all the tasks in the job.
        /// </summary>
        [JsonProperty(PropertyName = "readIOps")]
        public long ReadIOps { get; set; }

        /// <summary>
        /// Gets or sets the total number of I/O write operations performed by
        /// all the tasks in the job.
        /// </summary>
        [JsonProperty(PropertyName = "writeIOps")]
        public long WriteIOps { get; set; }

        /// <summary>
        /// Gets or sets the total amount of data in GiB of I/O read by all
        /// the tasks in the job.
        /// </summary>
        [JsonProperty(PropertyName = "readIOGiB")]
        public double ReadIOGiB { get; set; }

        /// <summary>
        /// Gets or sets the total amount of data in GiB of I/O written by all
        /// the tasks in the job.
        /// </summary>
        [JsonProperty(PropertyName = "writeIOGiB")]
        public double WriteIOGiB { get; set; }

        /// <summary>
        /// Gets or sets the total number of tasks successfully completed in
        /// the job during the given time range.
        /// </summary>
        [JsonProperty(PropertyName = "numSucceededTasks")]
        public long NumSucceededTasks { get; set; }

        /// <summary>
        /// Gets or sets the total number of tasks in the job that failed
        /// during the given time range.
        /// </summary>
        [JsonProperty(PropertyName = "numFailedTasks")]
        public long NumFailedTasks { get; set; }

        /// <summary>
        /// Gets or sets the total number of retries on all the tasks in the
        /// job during the given time range.
        /// </summary>
        [JsonProperty(PropertyName = "numTaskRetries")]
        public long NumTaskRetries { get; set; }

        /// <summary>
        /// Gets or sets the total wait time of all the tasks in the job.  The
        /// wait time for a task is defined as the elapsed time between the
        /// creation of the task creation and the start of task execution.
        /// This value is reported only in the account lifetime statistics;
        /// it is not included in individual job statistics.
        /// </summary>
        [JsonProperty(PropertyName = "waitTime")]
        public TimeSpan WaitTime { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
        }
    }
}
